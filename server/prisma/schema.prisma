// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  ACCESS_TOKEN
}

enum Gender {
  MALE
  FEMALE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

model Users {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  username String?
  password String
  role     Role    @default(USER)

  profile Profiles?
  token   Token[]
  orders  Orders[]
  reviews Reviews[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Profiles {
  id       Int     @id @default(autoincrement())
  fullname String?
  phone    String?
  address  String?
  gender   Gender?
  avatar   String?

  user   Users @relation(fields: [userId], references: [id])
  userId Int   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Categories {
  id            Int        @id @default(autoincrement())
  category_name String
  Products      Products[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Products {
  id           Int             @id @default(autoincrement())
  product_name String
  description  String?
  price        Decimal
  stock        Int
  category     Categories      @relation(fields: [categoryId], references: [id])
  categoryId   Int
  reviews      Reviews[]
  orderItems   OrderItems[]
  images       ProductImages[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model ProductImages {
  id        Int      @id @default(autoincrement())
  product   Products @relation(fields: [productId], references: [id])
  productId Int
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_images")
}

model Token {
  id     Int       @id @default(autoincrement())
  token  String
  type   TokenType
  User   Users     @relation(fields: [userId], references: [id])
  userId Int

  @@unique([userId, type], name: "userId_type_unique")
  @@map("tokens")
}

model Orders {
  id              Int              @id @default(autoincrement())
  user            Users            @relation(fields: [userId], references: [id])
  userId          Int
  orderItems      OrderItems[]
  totalAmount     Decimal          @default(0)
  paymentStatus   PaymentStatus    @default(PENDING)
  orderStatus     OrderStatus      @default(PENDING)
  shippingDetails ShippingDetails?
  paymentMethod   String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("orders")
}

model ShippingDetails {
  id         Int    @id @default(autoincrement())
  orderId    Int    @unique
  order      Orders @relation(fields: [orderId], references: [id])
  address    String
  city       String
  postalCode String
  country    String
  phone      String
}

model OrderItems {
  id        Int      @id @default(autoincrement())
  order     Orders   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Products @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

model Reviews {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  user      Users    @relation(fields: [userId], references: [id])
  userId    Int
  product   Products @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

// NEXT FITURE
// Cart: Fitur untuk mengelola produk yang ingin dibeli pengguna sebelum melakukan pembayaran.
// Wishlist: Fitur untuk menyimpan daftar produk yang diinginkan pengguna.
// Payment: Mengelola status pembayaran dan riwayat transaksi.
// Shipping: Mengelola detail pengiriman dan status pengiriman.
